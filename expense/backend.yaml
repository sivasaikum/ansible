- name: configuring Backend Application
  hosts: backend
  become: yes
  tasks:
  - name: disabling nodejs 
    ansible.builtin.command: dnf module disable nodejs -y
  - name: enablling nodejs 20 version
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: Installing nodejs
    ansible.builtin.package:
      name: "{{ item }}"
      state: present
    loop:
    - nodejs
    - mysql
  
  - name: creating a user
    ansible.builtin.user:
      name: expense
  
  - name: creating a app directory
    ansible.builtin.file:
      path: /app
      state: directory

  - name: downloading the backend code into temp direcrtory
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip

  - name: unzipping the code into app direcrtory
    ansible.builtin.unarchive:
      src: /tmp/backend.zip
      dest: /app
      remote_src: yes

  - name: Installing dependencies
    ansible.builtin.npm:
      path: /app
  
  - name: copy the service file
    ansible.builtin.copy:
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: Installing the python modules
    ansible.builtin.pip:
      name: "{{ item }}"
      state: present
    loop:
    - PyMySQL
    - cryptography

  - name: immporting the mysql schema
    community.mysql.mysql_db:
      state: import
      name: all
      login_user: root
      login_password: ExpenseApp@1
      login_host: mysql.jobsearchindia.online
      target: /app/schema/backend.sql

  - name: daemon reload and restart backend
    ansible.builtin.systemd_service:
      enabled: true
      state: restarted
      daemon_reload: true
      name: backend

   

- name: Remove unauthorized files based on SHA1 checksum
  hosts: localhost
  become: yes
  vars:
    checksum_file: "/home/ubuntu/1833145-ansible-recovery-from-hacker-attack-by-eliminating-unauthorized-files/checksums.txt"
    scan_dir: "/tmp/1833145-ansible-recovery-from-hacker-attack-by-eliminating-unauthorized-files"

  tasks:

    - name: Read list of valid checksums
      slurp:
        src: "{{ checksum_file }}"
      register: checksums_content

    - name: Convert checksum list to array
      set_fact:
        valid_checksums: "{{ checksums_content['content'] | b64decode | splitlines() }}"

    - name: Get list of files in scan directory
      find:
        paths: "{{ scan_dir }}"
        file_type: file
      register: found_files

    - name: Check file hashes and remove unauthorized files
      block:
        - name: Calculate SHA1 and remove unauthorized file
          shell: |
            sha1sum "{{ item.path }}" | awk '{print $1}'
          register: file_hash
          loop: "{{ found_files.files }}"
          loop_control:
            label: "{{ item.path }}"
          changed_when: false
          check_mode: no
          delegate_to: localhost
          failed_when: false

        - name: Delete file if checksum is not valid
          file:
            path: "{{ item.item.path }}"
            state: absent
          when: file_hash.stdout not in valid_checksums
          loop: "{{ file_hash.results }}"
          loop_control:
            label: "{{ item.item.path }}"
      when: found_files.files | length > 0

      